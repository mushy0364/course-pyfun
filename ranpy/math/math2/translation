#!/usr/bin/env python3

import colors as c

equation = "y = a * (f(x) + b) + c"

def ask_function():
    print("Please select the function of the equation.")
    while True:
        selection = {"A":"x","B":"(x + b)²","C":"(x + b)³","D":"√(x + b)","E":"|x + b|"}
        print("A: Linear\nB: Quadratic\nC: Cubic\nD: Square Root\nE: Absolute Value")
        function_selection = input("> ").upper().strip()
        if function_selection not in selection:
            print(c.clear + "Please choose a valid function.")
            continue
        else:
            return selection[function_selection]

def get_var(type_of_eq):
    equation = "y = a * {} + c".format(type_of_eq)
    print("\n" + equation)
    a = float(input("What is the 'a' value of the function? Please use decimals instead of fractions. > "))
    equation = equation.replace("a",str(a))
    if type_of_eq == "x":
        b = 0
        equation = equation.replace("b",str(b))
    else:
        b = float(input("What is the 'b' value of the function? Please use decimals instead of fractions. > "))
        equation = equation.replace("b",str(b))
    c = float(input("What is the 'c' value of the function? Please use decimals instead of fractions. > "))
    equation = equation.replace("c",str(c))
    print("\n" + equation)
    return a,b,c

def find_values(equation_type,a,b,c):
    if equation_type == "x":
        xdomain = "(-∞,∞)"
        yrange = "(-∞,∞)"
        if a < 0:
            ioi = "None"
            iod = "(-∞,∞)"
            end_behavior = "As x → ∞, y → -∞ | As x → -∞, y → ∞"
        else:
            ioi = "(-∞,∞)"
            iod = "None"
            end_behavior = "As x → ∞, y → ∞ | As x → -∞, y → -∞"
        extrema = "None"
    if equation_type == "(x + b)²":
        xdomain = "(-∞,∞)"
        if a < 0:
            yrange = "(-∞,{}]".format(c)
            ioi = "(-∞,{})".format(-b)
            iod = "({},∞)".format(-b)
            extrema = "Max at ({},{})".format(-b,c)
            end_behavior = "As x → ∞, y → -∞ | As x → -∞, y → -∞"
        else:
            yrange = "[{},∞)".format(c)
            ioi = "({},∞)".format(-b)
            iod = "(-∞,{})".format(-b)
            extrema = "Min at ({},{})".format(-b,c)
            end_behavior = "As x → ∞, y → ∞ | As x → -∞, y → ∞"
    if equation_type == "(x + b)³":
        xdomain = "(-∞,∞)"
        yrange = "(-∞,∞)"
        if a < 0:
            ioi = "None"
            iod = "(-∞,∞)"
            end_behavior = "As x → ∞, y → -∞ | As x → -∞, y → ∞"
        else:
            ioi = "(-∞,∞)"
            iod = "None"
            end_behavior = "As x → ∞, y → ∞ | As x → -∞, y → -∞"
        extrema = "None"
    if equation_type == "√(x + b)":
        xdomain = "[{},∞)".format(-b)
        if a > 0:
            yrange = "(-∞,{}]".format(c)
            ioi = "None"
            iod = "[{},∞)".format(-b)
            extrema = "Max at ({},{})".format(-b,c)
            end_behavior = "As x → ∞, y → -∞"
        else:
            yrange = "[{},∞)".format(c)
            ioi = "[{},∞)".format(-b)
            iod = "None"
            extrema = "Min at ({},{})".format(-b,c)
            end_behavior = "As x → ∞, y → ∞"
    if equation_type == "|x + b|":
        xdomain = "(-∞,∞)"
        if a < 0:
            yrange = "(-∞,{}]".format(c)
            ioi = "(-∞,{})".format(-b)
            iod = "({},∞)".format(-b)
            extrema = "Max at ({},{})".format(-b,c)
            end_behavior = "As x → ∞, y → -∞ | As x → -∞, y → -∞"
        else:
            yrange = "[{},∞)".format(c)
            ioi = "({},∞)".format(-b)
            iod = "(-∞,{})".format(-b)
            extrema = "Min at ({},{})".format(-b,c)
            end_behavior = "As x → ∞, y → ∞ | As x → -∞, y → ∞" 
    print("Domain = {} \nRange = {} \nInterval of Increase = {} \nInterval of Decrease = {} \nExtrema = {} \nEnd Behavior = {}".format(xdomain,yrange,ioi,iod,extrema,end_behavior))

def get_translation(a,b,c):
    print("\nTranslations\n----------")
    if a > 1 or a < -1:
        print("Vertical stretch by a factor of {}".format(abs(a)))
    if 0 < a < 1 or -1 > a > 0:
        print("Vertical compression by a factor of {}".format(abs(a)))
    if b < 0:
        print("Translated right {}".format(-b))
    if b > 0:
        print("Translated left {}".format(b))
    if a < 0:
        print("Reflected over the x-axis")
    if c > 0:
        print("Translated up {}".format(c))
    if c < 0:
        print("Translated down {}".format(-c))

try:
    print(c.clear + c.green + "Welcome to the Translations Calculator!")
    equation_type = ask_function()
    a,b,c = get_var(equation_type)
    find_values(equation_type,a,b,c)
    get_translation(a,b,c)
except KeyboardInterrupt:
    print("Thank you for using the program!")
    exit()
